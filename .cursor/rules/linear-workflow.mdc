---
alwaysApply: true
description: Complete Linear project management integration and workflow patterns for REDD, including project structure, workflow states, development processes, branch strategies, commit conventions, and PR templates
---

# Linear Integration & Workflow

## Project Management

**Project**: REDD v1
**Team**: Tabz
**Project ID**: `e302c31c-0379-4855-9514-025b6eb8f2ef`

### Workflow States

- **Backlog**: New issues and unplanned work
- **Todo**: Ready for development (equivalent to "In Review" in detailed workflow)
- **In Progress**: Currently being worked on
- **Done**: Completed and tested
- **Canceled**: No longer needed (equivalent to "Blocked" in detailed workflow)

### Labels

- **Priority**: `p0` (urgent), `p1` (high)
- **Type**: `frontend`, `backend`, `ml`, `infra`, `design`, `security`, `docs`
- **Version**: `v1`, `epic`

## Handling Task Descriptions

### Writing Effective Issue Titles

**Guidelines:**
- **Clear and specific**: Use action words and be descriptive
- **Include context**: Mention the feature/area when relevant
- **Consistent format**: Start with verb (Add, Fix, Update, Implement, etc.)

**Good Examples:**
- ✅ "Implement user authentication with JWT tokens"
- ✅ "Add form validation for case creation"
- ✅ "Fix document upload error handling"
- ✅ "Update dashboard layout for mobile responsiveness"

**Bad Examples:**
- ❌ "User login" (too vague)
- ❌ "Fix bug" (no context)
- ❌ "Make it work" (not actionable)

### Structuring Issue Descriptions

**Required Sections:**
1. **Goal** - Clear statement of what needs to be accomplished
2. **Context** - Background information and rationale
3. **AC** - Acceptance Criteria (specific, testable requirements)
4. **Tech Notes** - Technical considerations, assumptions, or constraints
5. **Estimate** - Development effort estimate

**Optional Sections:**
- **Design** - UI/UX requirements or mockups
- **Testing** - Specific test scenarios
- **Dependencies** - Related issues or blocking items

### Acceptance Criteria Best Practices

**Characteristics:**
- **Specific**: Clear, unambiguous requirements
- **Measurable**: Can be verified as done/not done
- **Actionable**: Break down into implementable tasks
- **Testable**: Can be validated through testing

**Format:**
```markdown
## AC:

### 1. Feature Requirements
- [ ] Specific requirement 1
- [ ] Specific requirement 2

### 2. UI/UX Requirements
- [ ] Visual requirement 1
- [ ] Interaction requirement 1

### 3. Testing Requirements
- [ ] Test scenario 1 passes
- [ ] Edge case handling verified
```

### Issue Description Template

```markdown
**Goal:** [Clear, concise statement of what needs to be built]

**Context:** [Background, rationale, and business value]

**AC:**

### 1. Core Functionality
- [ ] Requirement 1
- [ ] Requirement 2

### 2. User Experience
- [ ] UX requirement 1
- [ ] UX requirement 2

### 3. Technical Requirements
- [ ] Tech requirement 1
- [ ] Tech requirement 2

**Tech Notes:**
- [Technical considerations, assumptions, constraints]
- [API endpoints, database changes, dependencies]

**Estimate:** X points (estimated time)
```

### Updating Descriptions During Development

**When to Update:**
- **Requirements change**: New information discovered during implementation
- **Scope clarification**: Details become clearer during development
- **Dependencies identified**: New blocking items found
- **Technical approach refined**: Better understanding of implementation

**How to Update:**
1. **Keep original description** - Don't delete, just add updates
2. **Use clear markers** - Indicate what changed and why
3. **Update estimates** - Adjust if scope changed significantly
4. **Communicate changes** - Mention updates in comments

**Update Format:**
```markdown
**UPDATE 2024-01-15:** Clarified requirements based on discovery:
- Added requirement for [new feature]
- Updated estimate from 2 to 3 points

**Previous requirements still apply.**
```

### Common Description Pitfalls to Avoid

**❌ Too Vague:**
- "Make the app better"
- "Fix the issues"
- "Add functionality"

**❌ Missing Context:**
- No explanation of why this is needed
- No user impact described
- No success criteria defined

**❌ Poor Formatting:**
- Wall of text without structure
- No clear sections or headings
- Inconsistent formatting

**❌ Unrealistic Scope:**
- Trying to do too much in one issue
- No clear boundaries or scope definition
- Dependencies not identified

### Examples of Good vs Bad Descriptions

**❌ Bad Example:**
```
Title: Fix login

Description:
Fix the login so it works. Users can't log in right now.
```

**✅ Good Example:**
```
Title: Fix user authentication error handling

Description:
**Goal:** Resolve authentication failures and improve error messaging for users

**Context:** Users are experiencing login failures with unclear error messages, leading to support tickets and poor user experience

**AC:**

### 1. Error Handling
- [ ] Display specific, user-friendly error messages for common auth failures
- [ ] Implement retry mechanism for network-related auth errors
- [ ] Log authentication failures for debugging

### 2. User Experience
- [ ] Show loading states during authentication
- [ ] Provide clear feedback for invalid credentials
- [ ] Remember email address across login attempts

**Tech Notes:**
- Review current JWT implementation
- Check error response format from auth API
- Consider implementing exponential backoff for retries

**Estimate:** 3 points (~4-6 hours)
```

## Development Workflow

### Starting Work

1. **Claim Issue**: Use Linear MCP to assign issue to yourself
2. **Move to In Progress**: Update issue status
3. **Comment Plan**: Add a comment explaining your approach

```typescript
// Example workflow commands
// mcp_linear_update_issue({"id": "issue-id", "state": "In Progress"})
// mcp_linear_create_comment({"issueId": "issue-id", "body": "Plan: Implement component with X, Y, Z"})
```

### Branch Strategy

```
feature/[ticket-number]-[short-description]
fix/[ticket-number]-[short-description]
chore/[ticket-number]-[short-description]
```

Examples:
- `feature/tab-6-app-scaffold`
- `fix/tab-7-form-validation`
- `chore/tab-13-mock-data`

### Commit Conventions

```bash
# Format: type(scope): description
git commit -m "feat: add case creation form with validation"
git commit -m "fix: resolve document upload error handling"
git commit -m "chore: update dependencies and type definitions"
```

Types: `feat`, `fix`, `chore`, `docs`, `style`, `refactor`, `test`

### Pull Requests

**Template**:
```markdown
## What
- Brief description of changes

## Why
- User value / acceptance criteria

## How
- Key changes, assumptions, tradeoffs

## Screenshots / Proof
- Before/after screenshots or test results

## Checklist
- [ ] Tests added/updated
- [ ] Handles error/empty/loading states
- [ ] A11y quick pass
- [ ] Linked issue: Fixes TAB-###
```

**PR Title**: `[TAB-###] Brief description`

### Completing Work

1. **Create PR**: Link to Linear issue in description
2. **Request Review**: Assign to PM for review
3. **Update Linear**: Move issue to "Done" when PR merges
4. **Comment Results**: Add summary of what was implemented

## Key Commands

### Linear Operations
```typescript
// Get project issues
mcp_linear_list_issues({"project": "REDD v1"})

// Update issue status
mcp_linear_update_issue({
  "id": "issue-id",
  "state": "In Progress"
})

// Create comment
mcp_linear_create_comment({
  "issueId": "issue-id",
  "body": "Implementation complete with PR: [link]"
})
```

### Git Operations
```bash
# Create feature branch
git checkout -b feature/tab-6-app-scaffold

# Commit with conventional format
git commit -m "feat: scaffold Next.js app with layout and navigation"

# Push and create PR
git push origin feature/tab-6-app-scaffold
```