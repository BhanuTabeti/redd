---
globs: apps/web/src/app/case/**/*.{tsx,ts}
description: Case management routes and component patterns
---

# Case Management Routes

## Route Structure

```
/case/new          # New case creation
/case/[id]/        # Case detail routes
  ├── docs/        # Document inbox & OCR status
  ├── checklist/   # Due diligence checklist
  ├── title/       # Title chain analysis
  ├── findings/    # Risk findings & evidence
  └── report/      # Report composer
```

## New Case Route (`/case/new`)

**Purpose**: Form for creating new due diligence cases

**Components**:
- State/city selection
- Property ID input
- Buyer/seller information
- Client-side validation

**Mock Data Structure**:
```typescript
interface NewCaseData {
  state: string
  city: string
  propertyId: string
  buyerName: string
  sellerName: string
  caseType: 'residential' | 'commercial'
}
```

## Document Inbox (`/case/[id]/docs`)

**Purpose**: Upload and track document processing status

**Features**:
- File upload with drag & drop
- Processing status: Uploaded → OCR → Parsed
- Document preview modal
- Filter and search capabilities

**Status Flow**:
```typescript
type DocumentStatus = 'uploaded' | 'ocr_processing' | 'parsed' | 'error'

interface Document {
  id: string
  name: string
  status: DocumentStatus
  uploadedAt: Date
  parsedData?: any
}
```

## Checklist Route (`/case/[id]/checklist`)

**Purpose**: Interactive due diligence checklist with gap analysis

**Components**:
- Dynamic checklist items
- Status badges (Missing/Complete)
- Toggle functionality
- Rules engine integration

**Data Structure**:
```typescript
interface ChecklistItem {
  id: string
  title: string
  description: string
  status: 'missing' | 'in_progress' | 'complete'
  category: 'title' | 'environmental' | 'inspection' | 'legal'
  required: boolean
}
```

## Title Chain (`/case/[id]/title`)

**Purpose**: Visualize property ownership history

**Components**:
- Timeline visualization
- Owner information cards
- Reference document links
- Jump-to-snippet functionality

## Findings & Evidence (`/case/[id]/findings`)

**Purpose**: Risk assessment and evidence management

**Components**:
- R/A/G risk categorization
- Confirm/Waive buttons
- Evidence attachment
- Re-scoring functionality

**Risk Levels**:
```typescript
type RiskLevel = 'red' | 'amber' | 'green'

interface Finding {
  id: string
  title: string
  riskLevel: RiskLevel
  description: string
  evidence: string[]
  status: 'confirmed' | 'waived' | 'pending'
}
```

## Report Composer (`/case/[id]/report`)

**Purpose**: Generate due diligence reports

**Components**:
- Editable report sections
- Export functionality (PDF, Word)
- Clause tagging system
- Template integration

## Shared Components

### CaseLayout
- Breadcrumb navigation
- Case header with status
- Navigation sidebar
- Progress indicator

### CaseHeader
```tsx
interface CaseHeaderProps {
  caseId: string
  title: string
  status: 'draft' | 'in_progress' | 'complete'
  lastUpdated: Date
}
```

### Navigation
- Stepper component showing current route
- Previous/Next navigation
- Route validation

## State Management

Use URL state for route persistence:
```typescript
// hooks/useCaseNavigation.ts
export function useCaseNavigation(caseId: string) {
  const router = useRouter()
  const currentStep = getCurrentStepFromPathname()

  const goToStep = (step: CaseStep) => {
    router.push(`/case/${caseId}/${step}`)
  }

  return { currentStep, goToStep }
}
```

## Mock Data

All routes should use mock data from `/lib/mocks/`:
- Deterministic sample data
- Realistic property scenarios
- Edge cases for testing